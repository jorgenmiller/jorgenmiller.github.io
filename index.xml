<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jørgen Miller</title>
    <link>https://jorgenmiller.github.io/index.xml</link>
    <description>Recent content on Jørgen Miller</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 24 Oct 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jorgenmiller.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The A4 Paper Folding Puzzle</title>
      <link>https://jorgenmiller.github.io/blog/the-a4-paper-folding-puzzle/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jorgenmiller.github.io/blog/the-a4-paper-folding-puzzle/</guid>
      <description>&lt;p&gt;A4 paper in the UK measures 210mm on the short side and 297mm on the longer side. If we call the short side one unit in length, the long side is √(2). It is actually too long by less than a tenth of a millimeter, but let&amp;rsquo;s ignore that. So we have paper with sides 1 and √(2).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/A4pic01.jpg&#34; alt=&#34;A4 paper&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To setup the puzzle, we must fold the paper a bit. Fold one of the shorter sides over so it is flush with the longer edge. It should form a triangle. Then, take the corner opposite of the corner that has been turned into a point and fold it to touch the side of the larger triangle. Now, there should be two 45 degree triangles that touch on one side. The first triangle is significantly larger than the second.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/A4pic02.jpg&#34; alt=&#34;Fold to make a big 45 degree triangle and a smaller 45 degree triangle&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/A4pic03.jpg&#34; alt=&#34;The resulting shape&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now, the puzzle. What is the perimeter of this shape that is made?&lt;/p&gt;

&lt;p&gt;I suggest trying to solve it for yourself! When you are done (or if you are just lazy), &lt;a href=&#34;https://jorgenmiller.github.io/blog/the-a4-paper-folding-puzzle-solution&#34;&gt;here is the solution&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wifi Robots</title>
      <link>https://jorgenmiller.github.io/blog/wifi-robots/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jorgenmiller.github.io/blog/wifi-robots/</guid>
      <description>&lt;p&gt;The last robot I made was the &lt;a href=&#34;https://jorgenmiller.github.io/blog/lego-offroad-vehicle-with-brickpi/&#34;&gt;Offroad Vehicle&lt;/a&gt;. The biggest problem it had was the way it was controlled. I was using a logitech gamepad that had a USB plug. The wired connection limited the usuability, range, and was just annoying. Wireless Logitech gamepads are available for purchase, but why buy something when you have a mobile device? A phone can communicate with a Raspberry Pi over wifi to be used as a controller. This allows a large range, customizable controls, and the option to include a camera to drive your robot without line-of-sight.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&#34;https://socket.io/&#34;&gt;Sockets&lt;/a&gt; to communicate between my iPod and the BrickPi. It is traditionally used to send information between a client and server for things like chat rooms, so it will work great. For a robot and controller, the BrickPi Robot is the server. Whatever device controls it is the client. The client will use a website to send information to the BrickPi. I used &lt;a href=&#34;http://surge.sh/&#34;&gt;Surge&lt;/a&gt; to make a quick website.&lt;/p&gt;

&lt;p&gt;On the website, a bit of html can make a button, and some javascript will send it to the BrickPi. The BrickPi can use python to receive commands and control motors.&lt;/p&gt;

&lt;p&gt;For the front end, this should be included in the html.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;&amp;lt;js file&amp;gt;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The javascript should specify what IP address it should send to, and what port.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var socket = io.connect(&amp;quot;&amp;lt;IP address&amp;gt;:&amp;lt;port&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using an IP address for local connections only will ensure that no one else can control your Pi. Next, a message on an event should be sent to the pi which can be understood easily.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;socket.emit(&amp;quot;button&amp;quot;, &amp;quot;motor A&amp;quot;, &amp;quot;200&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be attached to a button to send when the button is clicked. The python will receive the message using &lt;code&gt;@SocketIO(app)&lt;/code&gt;. Here is a full back end that can receive commands for any motor. It also has a message for when a client connects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flask import Flask, render_template
from flask_socketio import SocketIO
from BrickPi import *

BrickPiSetup()
BrickPi.MotorEnable[PORT_A] = 1
BrickPi.MotorEnable[PORT_B] = 1
BrickPi.MotorEnable[PORT_C] = 1
BrickPi.MotorEnable[PORT_D] = 1

app = Flask(__name__)
socketio = SocketIO(app)

@socketio.on(&amp;quot;message&amp;quot;)
def handle_message(message):
    print(&amp;quot;received message: &amp;quot; + message)

@socketio.on(&amp;quot;button&amp;quot;)
def handle_button(motor, speed):
    print(str(motor) + &amp;quot;: &amp;quot; + str(speed))
    if motor == &amp;quot;motor A&amp;quot;:
        BrickPi.MotorSpeed[PORT_A] = int(speed)
    elif motor == &amp;quot;motor B&amp;quot;:
            BrickPi.MotorSpeed[PORT_B] = int(speed)
    elif motor == &amp;quot;motor C&amp;quot;:
            BrickPi.MotorSpeed[PORT_C] = int(speed)
    elif motor == &amp;quot;motor D&amp;quot;:
            BrickPi.MotorSpeed[PORT_D] = int(speed)
    BrickPiUpdateValues()
    BrickPiUpdateValues()

if __name__ == &amp;quot;__main__&amp;quot;:
    socketio.run(app,host= &amp;quot;0.0.0.0&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With a complete front end and back end, The pi can be controlled from a mobile device. It can actually be controlled from any device on your wifi.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&#34;https://socket.io/&#34;&gt;socket.io&lt;/a&gt; for more help and to learn how to use sockets to their full extent!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lego Offroad Vehicle with BrickPi</title>
      <link>https://jorgenmiller.github.io/blog/lego-offroad-vehicle-with-brickpi/</link>
      <pubDate>Wed, 21 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jorgenmiller.github.io/blog/lego-offroad-vehicle-with-brickpi/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/offroad_vehicle.jpg&#34; alt=&#34;A Lego Car&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This Lego car is controlled by a Raspberry Pi with a BrickPi attached. It drives like a tank using joystick input from a USB logitech F310 gamepad. The wheels are directly connected to the Lego NXT motors. It also has &amp;lsquo;suspension&amp;rsquo; because the plastic axles bend a bit. It can drive well on surfaces like gravel because the wheels need to slip as it turns since it drives like a tank.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/offroad_vehicle.gif&#34; alt=&#34;Oforad Vehicle in action&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The program uses threading to read input from the gamepad and drive the motors at the same time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from inputs import get_gamepad
from BrickPi import *
import threading

BrickPiSetup()    #enable serial connection with BrickPi
BrickPi.MotorEnable[PORT_A] = 1   #enable motors
BrickPi.MotorEnable[PORT_B] = 1
BrickPi.MotorEnable[PORT_C] = 1
BrickPi.MotorEnable[PORT_D] = 1

quitting = False    #make variable quitting

def gamepad():    #a thread to read gamepad input
    while True:
        for event in get_gamepad():
            if event.code == &amp;quot;ABS_Y&amp;quot;:   #run motors based on joysticks
                BrickPi.MotorSpeed[PORT_A] = event.state / -128
                BrickPi.MotorSpeed[PORT_B] = event.state / 128
            elif event.code == &amp;quot;ABS_RY&amp;quot;:
                BrickPi.MotorSpeed[PORT_C] = event.state / 128
                BrickPi.MotorSpeed[PORT_D] = event.state / -128
            elif event.code == &amp;quot;BTN_MODE&amp;quot;:    #quit
                global quitting
                quitting = True
                return

gamepad = threading.Thread(target = gamepad)
gamepad.start()

while True:
    BrickPiUpdateValues()   #update to run motors
    if quitting == True:
        sys.exit()    #full quit
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The BrickPi and Motor Control</title>
      <link>https://jorgenmiller.github.io/blog/the-brickpi-and-motor-control/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jorgenmiller.github.io/blog/the-brickpi-and-motor-control/</guid>
      <description>&lt;p&gt;Here is a python program that I made for the BrickPi. The purpose is to get input from the right joystick and give output with the motors. The speed of motor B is controlled by the x position of the right joystick and the speed of motor c is controlled by the y position of the right joystick. The joysticks give values between 0 and 32,500 It also has the ability to quit the program if the mode button is pressed. On my logitech F310 gamepad, that is the center button labeled logitech.&lt;/p&gt;

&lt;p&gt;The program uses inputs 0.1 to read the gamepad. Use &lt;code&gt;pip install inputs&lt;/code&gt; to get it. Once installed, &lt;code&gt;get_gamepad()&lt;/code&gt; may work properly, but you may need to edit it. you can find the name of your gamepad by looking in &lt;code&gt;/dev/input&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The main difficulty I had when trying to make this program was reading the gamepad and instructing the BrickPi simultaneously. The gamepad uses a loop where it waits for an input, but the BrickPi needs to loop to run the motors. The gamepad loop normally blocks the BrickPi, but this program uses threading to do both.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from inputs import get_gamepad
from BrickPi import *
import threading

BrickPiSetup()
BrickPi.MotorEnable[PORT_B] = 1   #uses motors B and C
BrickPi.MotorEnable[PORT_C] = 1

quitting = False

def gamepad():    #make a thread for the gamepad
    while True:   #stay in the thread
        for event in get_gamepad():   #wait for user input in list of inputs
            if event.code == &amp;quot;ABS_RX&amp;quot;:    #right joystick moved (x axis)
                BrickPi.MotorSpeed[PORT_B] = event.state / 128  #B moves 0-255
            elif event.code == &amp;quot;ABS_RY&amp;quot;:    #right joystick moved (y axis)
                BrickPi.MotorSpeed[PORT_C] = event.state / 128  #motor C moves
            elif event.code == &amp;quot;BTN_MODE&amp;quot;:    #quit pressed
                print &amp;quot;quitting&amp;quot;    
                global quitting   #a global variable
                quitting = True
                return    #exit thread

gamepad = threading.Thread(target = gamepad)    #simplify name
gamepad.start()   #start thread

while True:   #BrickPi loop is in main thread
    BrickPiUpdateValues()   #update to run motors
    if quitting == True:
        sys.exit()    #quit
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SSh and Github for the RPi</title>
      <link>https://jorgenmiller.github.io/blog/ssh-and-github-for-the-rpi/</link>
      <pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jorgenmiller.github.io/blog/ssh-and-github-for-the-rpi/</guid>
      <description>&lt;p&gt;It is annoying to have to plug in a monitor, keyboard, and mouse to the Raspberry Pi. It is also annoying to not be able to access the files or the RPi from elsewhere. SSH and GitHub can help here.&lt;/p&gt;

&lt;p&gt;SSH allows a Pi to be used remotely. To SSH, first you need the IP address. you can &lt;code&gt;hostname -I&lt;/code&gt; on your Pi to get the IP address. Although it may show a long string of numbers, the IP address should be four numbers separated by periods. For example, &lt;code&gt;173.2.20.192&lt;/code&gt; could be an IP address. Once you have the IP address, use the command &lt;code&gt;ssh &amp;lt;username&amp;gt;@&amp;lt;IP adress&amp;gt;&lt;/code&gt; to connect. The default username is pi. &lt;code&gt;ssh pi@173.2.20.192&lt;/code&gt; could connect to a pi. The first time you connect, it will give you a prompt. Type &lt;code&gt;yes&lt;/code&gt; to continue. Then it will ask for you password on the pi. The default password is raspberry. If you want a graphical application like Idle or Scratch, use &lt;code&gt;ssh -Y &amp;lt;username&amp;gt;@&amp;lt;IP address&amp;gt;&lt;/code&gt;. When you are finished, type &lt;code&gt;exit&lt;/code&gt; to quit the SSH session.&lt;/p&gt;

&lt;p&gt;Github will allow the Pi to push its files to the cloud and allow other devices to later access them. &lt;code&gt;sudo apt install git&lt;/code&gt; to get git, so you can use GitHub. On your pi (or while using SSH) you need to identify who you are.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-unix&#34;&gt;git config --global user.name &amp;quot;&amp;lt;Your name&amp;gt;&amp;quot;
git config --global user.email &amp;quot;&amp;lt;Your email&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, make sure you are inside the directory you want on GitHub. Use &lt;code&gt;git init&lt;/code&gt; to make it a git repository. &lt;code&gt;ls -a&lt;/code&gt; to check that there is a &lt;code&gt;.git&lt;/code&gt; folder in your directory. To add your files to the repository, &lt;code&gt;git add -A&lt;/code&gt; to add all the files. Then use &lt;code&gt;git commit -m&amp;quot;&amp;lt;commit message&amp;gt;&amp;quot;&lt;/code&gt; to commit the files. Now, make or login to Your GitHub account. make a new repository and give your it a name. Now your repository exists. It will bring you to a setup screen. It will give you commands to use under the &amp;lsquo;push an existing repository&amp;rsquo; section. They will look like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-unix&#34;&gt;git remote add origin (...)
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you look on Github, the files in your folder should now be online. You can now use these commands to add your files to GitHub.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-unix&#34;&gt;git add -A
git commit -m&amp;quot;&amp;lt;commit message&amp;gt;&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can remotely use a Raspberry Pi with SSH and access a folder of your pi from GitHub.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The BrickPi</title>
      <link>https://jorgenmiller.github.io/blog/the-brickpi/</link>
      <pubDate>Wed, 14 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jorgenmiller.github.io/blog/the-brickpi/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/brickpi.jpg&#34; alt=&#34;The BrickPi&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The BrickPi is an attachment from Dexter Industries for the Raspberry Pi that allows the Pi to easily use NXT motors and sensors. It can control four NXT motors and get input from four NXT sensors. It fits on top of a Pi and comes with a lego compatible case to protect it and the Pi. The BrickPi can be bought online at &lt;a href=&#34;https://www.dexterindustries.com/&#34;&gt;DexterIndustries.com&lt;/a&gt; and instructions to get the BrickPi SD card iamge can be found &lt;a href=&#34;https://www.dexterindustries.com/howto/install-raspbian-for-robots-image-on-an-sd-card/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The BrickPi can be programmed in C, scratch, or python. I chose to use python. The SD card image comes with examples that you can use to learn the BrickPi commands, but here are some of the standard ones used in a program to run a motor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from BrickPi import *   #use the BrickPi
BrickPiSetup()    #initiate the BrickPi

BrickPi.MotorEnable[PORT_A] = 1   #initiate motor A

BrickPi.MotorSpeed[PORT_A] = 255    #motor A state to max speed

while True:   #this needs to be repeated
  BrickPiUpdateValues()   #update states with the BrickPi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The commands for sensors are similar. The examples on the SD card show each command and what kind of  input each sensor has.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intel ISEF 2017</title>
      <link>https://jorgenmiller.github.io/blog/intel-isef-2017/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jorgenmiller.github.io/blog/intel-isef-2017/</guid>
      <description>&lt;p&gt;Charlie Giglio, my friend, and I were selected to go to the Intel International Science and Engineering Fair in Los Angeles. It is the largest precollege science fair. We earned an observer status, which means our responsibility was to understand what the fair is like so that we can compete as upperclassmen in the coming years.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/conventioncenter.jpg&#34; alt=&#34;The Los Angeles Convention Center&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The fair took place inside the LA Convention Center. There were 1,778 projects set up by finalists in one of the many large halls. Another hall was reserved for the ceremonies during the fair. At the opening ceremony, Derek Muller from Veritasium was the host. The main speaker was Manu Prakash. Mr. Prakash is the inventor of the foldscope, a $1 paper microscope, and the paperfuge, a hand powered spinning paper whirligig that is able to separate the main components of blood in less than 2 minutes.&lt;/p&gt;

&lt;p&gt;ISEF also organized a pin exchange, dinners, and volunteering as tour guides. At the pin exchange, all of the ISEF participants exchanged small pins or gifts between each other. I met groups from all over the world at the pin exchange. At the dinners, all of the students were again encouraged to talk. The second to last day was public day, so observers could volunteer to show local LA schools around the convention center and around the exhibit hall.&lt;/p&gt;

&lt;p&gt;During the week, our group also visited University of South California and the Los Angeles Science Center. We took a tour of USC and completed small design challenges made for ISEF students. The science center had a wave pool, a wall of ice, planes, and even a space shuttle. The space shuttle Endeavour was there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/endeavour.jpg&#34; alt=&#34;the Endeavour Space Shuttle&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The shuttle was absolutely huge and outside was a gigantic fuel shuttle. While on the ISEF trip, one of the most fun things was going to Universal Studios. We rode all the rides and ate food there for free with our new friends. The whole trip was an amazing experience and I hope I will be picked to participate in ISEF again.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry Pi</title>
      <link>https://jorgenmiller.github.io/blog/raspberry-pi/</link>
      <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jorgenmiller.github.io/blog/raspberry-pi/</guid>
      <description>&lt;p&gt;The Raspberry Pi 3 is the newest model of raspberry pis, common and small computers. The RPi3 is a little bit smaller than an altoid tin. Here are its specs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;85.6 mm x 56 mm x 21 mm&lt;/li&gt;
&lt;li&gt;64-bit quadcore processor&lt;/li&gt;
&lt;li&gt;1 GB RAM&lt;/li&gt;
&lt;li&gt;4 USB ports&lt;/li&gt;
&lt;li&gt;Ethernet &lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;100&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Bluetooth 4.0&lt;/li&gt;
&lt;li&gt;802.11n Wireless LAN&lt;/li&gt;
&lt;li&gt;HDMI and composite video&lt;/li&gt;
&lt;li&gt;HDMI and headphone audio&lt;/li&gt;
&lt;li&gt;40 GPIO pins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you look at an RPi3, these are the main components you will notice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/raspberrypidiagram.jpg&#34; alt=&#34;raspberry pi diagram&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Lego XL Motor</title>
      <link>https://jorgenmiller.github.io/blog/the-lego-xl-motor/</link>
      <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jorgenmiller.github.io/blog/the-lego-xl-motor/</guid>
      <description>&lt;p&gt;Lego&amp;rsquo;s XL Motor has the most mechanical power of all the Lego Power Functions. At 9V, it can deliver about 0.4 of a Newton-metre (N·m), the measurement for torque. One newton-metre is the equal to the torque created by perpendicularly applying one newton of force to a one metre arm able to rotate on one endpoint. The  Lego mindstorms NXT large motor has similar characteristics, as I believe they are similar constructions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/XLmotor.jpg&#34; alt=&#34;the XL motor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;All Lego power functions have the same connector with four nodes. The two outer nodes power receivers, and the inner nodes supply power to the motor. The motor will run if it is directly connected to a power supply (no more than 9V) via the inner nodes on the connector.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/pfconnector.jpg&#34; alt=&#34;the connector for all Lego power functions&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to take apart an XL motor, for modding or curiosity, the dark gray top must be removed. This requires grinding down the bumps that hold it on. The motor on the left is ready to be taken apart.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/comparisondeconstruction.jpg&#34; alt=&#34;grind down the dark gray bumps that hold the cap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then, pop off the top. Squeezing the sides and pulling will work, but a screw driver can help to remove it easily.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/XLdeconstruct.jpg&#34; alt=&#34;push it out with a screw driver&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There is an electric motor and a planetary gear reduction system inside.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/XLinsides.jpg&#34; alt=&#34;elctric motor and gear reduction and the casing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The electric motor inside is what powers the XL motor. The electric motor has caps on the bottom. They may be capacitors, noise reduction caps, or for regenerative braking. If they are capacitors, they would gain energy when the motor is forcefully stopped, and then releases it to turn the motor with more power. Noise reduction and regenrative caps would do exactly as they sound like they would.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/XLelectricmotor.jpg&#34; alt=&#34;bottom of electric motor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The planetary gear reduction slows the output of the electric motor and gives the whole motor more torque. However, the gearing adds some friction. The motor would spin faster and should be a little bit more efficient without the reduction.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/planetary.jpg&#34; alt=&#34;the planetary gear reduction system&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To mod the XL motor, removing the two bumps on the bottom of the planetary casing would allow the whole system to rotate, with a little bit less friction. Another way would be to glue the gears to the carrier and shave off the teeth on the outer side so that the carrier and gears rotate with the motor, but without touching the ring gear in the casing.&lt;/p&gt;

&lt;p&gt;Before modding, make sure to have a plan, have the correct tools, and keep in mind that it may fail. With the XL motor, modding will only slightly improve the motor&amp;rsquo;s efficiency.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.philohome.com/motors/motorcomp.htm&#34;&gt;Here is some helpful information and comparisons of Lego motors.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Robotic Arm Three Motor Principle</title>
      <link>https://jorgenmiller.github.io/blog/robotic-arm-three-motor-principle/</link>
      <pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jorgenmiller.github.io/blog/robotic-arm-three-motor-principle/</guid>
      <description>&lt;p&gt;Robotic Arms are fun to build and can complete many different tasks. For a full three dimensional movement, six controlled joints are required. Usually, they are arranged some what like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/sixmotorarmcontrol.jpg&#34; alt=&#34;Six motor control of a robotic arm&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Six servos can be a lot of motors to control. Sometimes it is excessive. In my Science Fair project in 2017, there was not a need to move upwards. Also, NXT can only support three motors (without brick-to-brick communication). I made a design that requires only three motors to move the end of the arm in a two dimensional plane.&lt;/p&gt;

&lt;p&gt;This Lego arm is controlled by only three motors. This design functions when the arm makes a triangle where&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two side lengths stay the same, but not necessarily equivalent&lt;/li&gt;
&lt;li&gt;the two base angles are free to rotate&lt;/li&gt;
&lt;li&gt;the top angle is controlled by a servo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this triangle, when the top angle is changed, the bottom side of the triangle decreases or increase and the two base angles will also change. The amount that the bottom side changes depends on the lengths of the sides.&lt;/p&gt;

&lt;p&gt;In a robotic Arm, it would look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/threemotorarmcontrol.jpg&#34; alt=&#34;Three motor control of a robotic arm&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In total, the arm would rotate its base with one motor, extend the end of the arm with another motor, and complete a task (like grabbing an object) with another motor. The arm only uses three motors to move around its area and activate the end effector.&lt;/p&gt;

&lt;p&gt;Here is a Lego Arm that I built that functions using this principle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jorgenmiller.github.io/blog_imgs/threemotorarm.jpg&#34; alt=&#34;Three motors in a Lego arm&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This arm only uses three motors and has two joints that are free to rotate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NXT Programming Alternatives</title>
      <link>https://jorgenmiller.github.io/blog/nxt-programming-alternatives/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jorgenmiller.github.io/blog/nxt-programming-alternatives/</guid>
      <description>&lt;p&gt;NXT mindstorms are Lego compatible motors and sensors that are controlled by an intelligent brick. The brick comes with &lt;a href=&#34;https://www.lego.com/en-us/mindstorms/downloads/nxt-software-download&#34;&gt;NXT-G&lt;/a&gt;, a drag and drop style program.&lt;/p&gt;

&lt;p&gt;Personally, I do not like NXT-G.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;drag and drop takes a long time&lt;/li&gt;
&lt;li&gt;the way to connect blocks in the program is unusual and difficult to understand&lt;/li&gt;
&lt;li&gt;it is unfamiliar to me&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a few programming alternatives.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://enchanting.robotclub.ab.ca/tiki-index.php&#34;&gt;Enchanting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.lejos.org/nxj.php&#34;&gt;NXJ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.teamhassenplug.org/NXT/ICON/&#34;&gt;ICON&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.dexterindustries.com/brickpi/&#34;&gt;BrickPi&lt;/a&gt; is a great way to motorize LEGOs! It can use Python, Scratch, or C to control NXT motors and could be modded to control any dc motor. Although they require a Raspberry Pi and are a little expensive, the BrickPi is a great way to control your motors.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://jorgenmiller.github.io/about/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jorgenmiller.github.io/about/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a kid who builds robots!&lt;/p&gt;

&lt;p&gt;jorgen.j.miller@gmail.com&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>